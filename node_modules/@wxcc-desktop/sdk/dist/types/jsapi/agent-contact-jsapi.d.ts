import { AgentxService, Service } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
import { AqmServiceEntityEvents } from "./common/_service-events";
declare type Listeners = {
    eAgentContact: Parameters<AgentxService["aqm"]["contact"]["eAgentContact"]["listen"]>[0];
    eAgentContactAssigned: Parameters<AgentxService["aqm"]["contact"]["eAgentContactAssigned"]["listen"]>[0];
    eAgentContactEnded: Parameters<AgentxService["aqm"]["contact"]["eAgentContactEnded"]["listen"]>[0];
    eAgentContactWrappedUp: Parameters<AgentxService["aqm"]["contact"]["eAgentContactWrappedUp"]["listen"]>[0];
    eAgentOfferContact: Parameters<AgentxService["aqm"]["contact"]["eAgentOfferContact"]["listen"]>[0];
    eAgentOfferContactRona: Parameters<AgentxService["aqm"]["contact"]["eAgentOfferContactRona"]["listen"]>[0];
    eAgentOfferConsult: Parameters<AgentxService["aqm"]["contact"]["eAgentOfferConsult"]["listen"]>[0];
    eAgentWrapup: Parameters<AgentxService["aqm"]["contact"]["eAgentWrapup"]["listen"]>[0];
    eAgentContactHeld: Parameters<AgentxService["aqm"]["contact"]["eAgentContactHeld"]["listen"]>[0];
    eAgentContactUnHeld: Parameters<AgentxService["aqm"]["contact"]["eAgentContactUnHeld"]["listen"]>[0];
    eCallRecordingStarted: Parameters<AgentxService["aqm"]["contact"]["eCallRecordingStarted"]["listen"]>[0];
    eAgentConsultCreated: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultCreated"]["listen"]>[0];
    eAgentConsultConferenced: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultConferenced"]["listen"]>[0];
    eAgentConsultEnded: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultEnded"]["listen"]>[0];
    eAgentCtqCancelled: Parameters<AgentxService["aqm"]["contact"]["eAgentCtqCancelled"]["listen"]>[0];
    eAgentConsulting: Parameters<AgentxService["aqm"]["contact"]["eAgentConsulting"]["listen"]>[0];
    eAgentConsultFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultFailed"]["listen"]>[0];
    eAgentConsultEndFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultEndFailed"]["listen"]>[0];
    eAgentCtqFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentCtqFailed"]["listen"]>[0];
    eAgentCtqCancelFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentCtqCancelFailed"]["listen"]>[0];
    eAgentConsultConferenceEndFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultConferenceEndFailed"]["listen"]>[0];
    eAgentMonitorStateChanged: Parameters<AgentxService["aqm"]["contact"]["eAgentMonitorStateChanged"]["listen"]>[0];
    eAgentMonitoringEnded: Parameters<AgentxService["aqm"]["contact"]["eAgentMonitoringEnded"]["listen"]>[0];
    eAgentOfferCampaignReserved: Parameters<AgentxService["aqm"]["contact"]["eAgentOfferCampaignReserved"]["listen"]>[0];
    eAgentAddCampaignReserved: Parameters<AgentxService["aqm"]["contact"]["eAgentAddCampaignReserved"]["listen"]>[0];
};
declare type AqmContactEvents = AqmServiceEntityEvents<Listeners>;
declare type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
    aqmEvents: AqmContactEvents;
};
export declare class AgentContactJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private readonly aqmEvents;
    private SERVICE?;
    private checkService;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    sendDtmf(digit: any): void;
    accept(p: {
        interactionId: string;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    consultAccept(p: {
        interactionId: string;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    buddyAgents(p: {
        data: Service.Aqm.Contact.BuddyAgents;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        eventType: string;
        agentId: string;
        trackingId: string;
        agentSessionId: string;
        orgId: string;
        type: string;
        agentList: Service.Aqm.Contact.BuddyDetails[];
    }> | undefined>;
    end(p: {
        interactionId: string;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    consultEnd(p: {
        interactionId: string;
        isConsult: boolean;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    cancelCtq(p: {
        interactionId: string;
        data: Service.Aqm.Contact.cancelCtq;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    wrapup(p: {
        interactionId: string;
        data: Service.Aqm.Contact.WrapupPayLoad;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    vteamTransfer(p: {
        interactionId: string;
        data: Service.Aqm.Contact.vteamTransferPayLoad;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    blindTransfer(p: {
        interactionId: string;
        data: Service.Aqm.Contact.blindTransferPayLoad;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    hold(p: {
        interactionId: string;
        data: {
            mediaResourceId: string;
        };
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    unHold(p: {
        interactionId: string;
        data: {
            mediaResourceId: string;
        };
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    consult(p: {
        interactionId: string;
        data: Service.Aqm.Contact.ConsultPayload | Service.Aqm.Contact.ConsultDN | Service.Aqm.Contact.ConsultAgent | Service.Aqm.Contact.ConsultQueue;
        url: string;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    consultConference(p: {
        interactionId: string;
        data: Service.Aqm.Contact.ConsultPayload;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    decline(p: {
        interactionId: string;
        data: {
            mediaResourceId: string;
        };
        isConsult: boolean;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    consultTransfer(p: {
        interactionId: string;
        data: Service.Aqm.Contact.consultTransferPayLoad;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    vteamList(p: {
        data: Service.Aqm.Contact.VTeam;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        data: {
            vteamList: Service.Aqm.Contact.VteamDetails[];
            allowConsultToQueue: boolean;
        };
        jsMethod: string;
        callData: string;
        agentSessionId: string;
    }> | undefined>;
    pauseRecording(p: {
        interactionId: string;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    resumeRecording(p: {
        interactionId: string;
        data: {
            autoResumed: boolean;
        };
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    addEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    addOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeAllEventListeners(): void;
}
export declare const createAgentContactJsApi: () => AgentContactJsApi;
export {};
