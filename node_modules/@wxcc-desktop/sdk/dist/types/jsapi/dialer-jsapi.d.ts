import { AgentxService, Service } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
import { AqmServiceEntityEvents } from "./common/_service-events";
declare type Listeners = {
    eOutdialFailed: Parameters<AgentxService["aqm"]["dialer"]["eOutdialFailed"]["listen"]>[0];
};
declare type AqmDialerEvents = AqmServiceEntityEvents<Listeners>;
declare type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
    aqmEvents: AqmDialerEvents;
};
export declare class DialerJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private readonly aqmEvents;
    private SERVICE?;
    private checkService;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    startOutdial(p: {
        data: Service.Aqm.Dialer.tasks;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
    }> | undefined>;
    updateCadVariables(p: {
        interactionId: string;
        data: Service.Aqm.Dialer.updateCadPayLoad;
        secureCad?: Array<string>;
        keyId: string | null;
        keyVersion: number | null;
    }): Promise<any>;
    addEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    addOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeAllEventListeners(): void;
}
export declare const createDialerJsApi: () => DialerJsApi;
export {};
