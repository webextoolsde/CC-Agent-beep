import { AgentxService, Service } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
declare type IdleCodeData = {
    id: string;
    name: string;
};
declare type LatestInfoData = {
    agentName?: string;
    agentProfileID?: string;
    agentSessionId?: string;
    teamId?: string;
    teamName?: string;
    dn?: string;
    status?: string;
    subStatus?: string;
    idleCode?: IdleCodeData;
    idleCodes?: Service.Aqm.Configs.Entity[];
    wrapupCodes?: Service.Aqm.Configs.Entity[];
    outDialRegex?: string;
    isOutboundEnabledForTenant?: boolean;
    isOutboundEnabledForAgent?: boolean;
    isAdhocDialingEnabled?: boolean;
    isEndCallEnabled?: boolean;
    isEndConsultEnabled?: boolean;
    allowConsultToQueue?: boolean;
    isAgentAvailableAfterOutdial?: boolean;
    isCampaignManagementEnabled?: boolean;
    agentPersonalStatsEnabled?: boolean;
};
declare type Listeners = {
    updated: (p: {
        name: keyof LatestInfoData;
        value?: string;
        oldValue?: string;
    }[]) => void;
};
declare type Events = keyof Listeners;
declare type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
};
declare type changeAgentStateDataType = {
    state: "AVAILABLE" | "IDLE";
    auxCodeId: string;
    lastStateChangeReason?: string;
    agentId: string;
};
export declare class AgentStateInfoJsapi {
    private readonly emitter;
    private readonly logger;
    private readonly serviceChecker;
    private SERVICE?;
    private checkService;
    private listeners;
    private emit;
    private update;
    private static getOutdialRegex;
    constructor(config: Config);
    private static findTeamName;
    private teams;
    private idleCodes;
    latestData: LatestInfoData;
    init(SERVICE?: AgentxService): Promise<void>;
    cleanup(): void;
    private fetchLatestData;
    private subscribeSelfDataEvents;
    private unsubscribeSelfDataEvents;
    stateChange(stateData: {
        state: "Available" | "Idle";
        auxCodeIdArray: string;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: "Idle" | "Available";
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        type: "AgentStateChangeSuccess";
        changedBy: string | null;
        changedById: string | null;
        changedByName: string | null;
    }> | undefined>;
    mockOutdialAniList(): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        data: Record<string, any>;
    }> | undefined>;
    fetchAddressBooks(): Promise<Service.Aqm.Agent.AddressBooks | undefined>;
    changeAgentState(orgId: string, data: changeAgentStateDataType): Promise<void | undefined>;
    fetchAgentIdleCodes(orgId: string, agentId: string): Promise<Service.Cms.AgentIdleCodes | undefined>;
    fetchOrganizationIdleCodes(orgId: string): Promise<Service.Aqm.Configs.Entity[] | undefined>;
    addEventListener<T extends Events>(eventName: T, listener: Listeners[T]): void;
    removeEventListener<T extends Events>(eventName: T, listener: Listeners[T]): void;
    removeAllEventListeners(): void;
}
export declare const createAgentStateInfoJsApi: () => AgentStateInfoJsapi;
export {};
