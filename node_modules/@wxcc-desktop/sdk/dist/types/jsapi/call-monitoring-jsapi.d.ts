import { AgentxService, Service } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
import { AqmServiceEntityEvents } from "./common/_service-events";
declare type Listeners = {
    eMonitoringOffered: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringOffered"]["listen"]>[0];
    eMonitoringStarted: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringStarted"]["listen"]>[0];
    eMonitoringRequestCreateFailed: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringRequestCreateFailed"]["listen"]>[0];
    eMonitoringFailed: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringFailed"]["listen"]>[0];
    eMonitoringEnded: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringEnded"]["listen"]>[0];
    eMonitoringEndFailed: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringEndFailed"]["listen"]>[0];
    eMonitoringHeld: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringHeld"]["listen"]>[0];
    eMonitoringHoldFailed: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringHoldFailed"]["listen"]>[0];
    eMonitoringUnHeld: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringUnHeld"]["listen"]>[0];
    eMonitoringUnHoldFailed: Parameters<AgentxService["aqm"]["supervisor"]["eMonitoringUnHoldFailed"]["listen"]>[0];
    eBargedIn: Parameters<AgentxService["aqm"]["supervisor"]["eBargedIn"]["listen"]>[0];
    eBargeInFailed: Parameters<AgentxService["aqm"]["supervisor"]["eBargeInFailed"]["listen"]>[0];
};
declare type AqmSupervisorEvents = AqmServiceEntityEvents<Listeners>;
declare type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
    aqmEvents: AqmSupervisorEvents;
};
export declare class CallMonitorJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private readonly aqmEvents;
    private SERVICE?;
    private checkService;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    startMonitoring(p: {
        data: Service.Aqm.Supervisor.MonitoringRequest;
    }): Promise<any>;
    endMonitoring(p: {
        interactionId: string;
    }): Promise<any>;
    holdMonitoring(p: {
        interactionId: string;
    }): Promise<any>;
    unHoldMonitoring(p: {
        interactionId: string;
    }): Promise<any>;
    bargeIn(p: {
        interactionId: string;
    }): Promise<any>;
    addEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    addOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeAllEventListeners(): void;
}
export declare const createMonitoringJsApi: () => CallMonitorJsApi;
export {};
