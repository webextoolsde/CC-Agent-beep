import { AgentxService, Service } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
import { AqmServiceEntityEvents } from "./common/_service-events";
declare type Listeners = {
    eAgentLogoutSuccess: Parameters<AgentxService["aqm"]["agent"]["eAgentLogoutSuccess"]["listen"]>[0];
};
declare type AqmAgentEvents = AqmServiceEntityEvents<Listeners>;
declare type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
    aqmEvents: AqmAgentEvents;
};
export declare class LogoutJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private readonly aqmEvents;
    private SERVICE?;
    private checkService;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    desktopLogout(p: {
        data: Service.Aqm.Agent.Logout;
    }): Promise<import("@wxcc-desktop/sdk-types/agentx-services/core/aqm-reqs").Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: string;
        loggedOutBy?: string | undefined;
        roles?: string[] | undefined;
        type: "AgentLogoutSuccess";
    }> | undefined>;
    addEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    addOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeAllEventListeners(): void;
}
export declare const stationLogoutJsApi: () => LogoutJsApi;
export {};
