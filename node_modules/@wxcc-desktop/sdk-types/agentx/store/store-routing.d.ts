import { RouteName } from "@/app/routing/routing";
import { Router } from "@uuip/unified-ui-platform";
import { RouteExtraParamsMap } from "./store-routing.types";
export declare class ModuleRouting {
    routes: Router.RouteConfig[];
    private _currentRouteName;
    private _currentRouteValues;
    private extraParamsMap;
    constructor();
    /**
     * Computed
     */
    get currentRouteName(): string | null;
    get currentRouteValues(): Router.RouteValues<Record<string, string>, Record<string, string>>;
    get forNavRouteName(): string | null;
    /**
     * Actions
     */
    sync(routeName: string, routeValues?: Router.RouteValues): void;
    syncQueryParams(query: any): void;
    navigate<DynamicRouteName extends string = never>(routeName: RouteName | DynamicRouteName, routeValues?: Router.RouteValues): void;
    navigateHome(): void;
    navigateTask(taskId: string): void;
    navigateTaskOnConfirm(taskId: string): void;
    showNavigationErrorModal(callback: () => void): void;
    navigateNav(navigateTo: RouteName | string): void;
    setRoutes(routes: Router.RouteConfig[]): void;
    getRoutes(): Router.RouteConfig[];
    telemetryTrackingForNavigation: () => void;
    navigateNavOnConfirm(navigateTo: RouteName | string): void;
    getExtraRouteParams(routeName: RouteName): RouteExtraParamsMap[RouteName];
    setExtraRouteParams<T extends RouteName>(routeName: T, params: RouteExtraParamsMap[T]): void;
}
declare module "@/store" {
    namespace Store.Routing { }
}
export declare const routing: ModuleRouting;
