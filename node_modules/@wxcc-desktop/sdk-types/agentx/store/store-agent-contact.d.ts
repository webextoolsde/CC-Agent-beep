import { Store } from "@/store";
import { InteractionControlNS } from "@agentx/agentx-mfe-react-based";
import { TaskList } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
import { OpenTasksStore, OpenTask as Task } from "@component-stores/TasksStore";
export declare enum MediaType {
    Telephony = "telephony",
    Chat = "chat",
    Email = "email",
    Social = "social",
    Midcall = "midcall telephony",
    APPLE_BUSINESS_CHAT = "appleMessages"
}
export type ContactCleanup = Service.Aqm.Contact.ContactCleanupData["data"];
/**
 * masking sensitive dataTypes
 */
export declare const OUTBOUND = "OUTBOUND";
export declare const ANI = "ani";
export declare const DN = "dn";
export declare const SOURCENUMBER = "sourceNumber";
export declare const CUSTOMERNUMBER = "customerNumber";
export declare class ModuleAgentContact extends OpenTasksStore {
    /**
     * Observable block
     */
    EpDnConsultDestinationAgentJoined: boolean;
    lastCompletedTask: string;
    selectedQueueId: string;
    newOfferPopoverCount: number;
    interactionIds: string[];
    openCADSection: boolean;
    chatConferenceData: Store.AgentContact.chatConferenceData;
    checkNewReplies: boolean;
    showNewReply: boolean;
    showArrow: boolean;
    copyTaskMap: Map<string, Task>;
    navigationWarning: {
        [key: string]: boolean;
    };
    interactionControlDimension: {
        mainCallContainerHeight: number;
        consultCallContainerHeight: number;
    };
    interactionControlCAD: {
        isMainContainerCADExpanded: boolean;
        isConsultContainerCADExpanded: boolean;
    };
    monitoringOwnerName: string;
    isMonitoringNotEndedManually: boolean;
    isCallMuted: any;
    agentCallMonitoringState: InteractionControlNS.AgentCallMonitoringState | undefined;
    openTaskListSortOption?: TaskList.SortOption;
    selectedMediaConversationId: string;
    /**
     * Utils block
     */
    private readonly popoverEventTypes;
    private readonly dialerPreviewCampaignTypes;
    private readonly dialerPreviewCampaignOutboundType;
    private readonly isNonTerminatedTask;
    private readonly isAgentAddedToCampaign;
    private readonly isAgentAddedToCampaignNew;
    private readonly isAgentContactInRingingState;
    private readonly isAgentContactInOfferConsultState;
    private readonly isSupervisorInMonitorOfferState;
    private readonly isValidEventForPopover;
    private readonly isNonCustomerParticipant;
    private readonly getDestinationAgentId;
    private readonly getNonCustomerParticipantIds;
    private readonly calculateDestAgentId;
    private readonly calculateDestAgentIdForFetchingDestType;
    private readonly getStatus;
    private readonly isConferencingAfterConsultCompleted;
    private readonly getDestPhoneNumber;
    private readonly getDestAgentName;
    private readonly getMediaType;
    private readonly getTimeStamp;
    private readonly handleTaskDelete;
    constructor();
    maskTask(task: Task): Task;
    maskCallAssociatedData(task: Task, property: string): Task;
    flattenTaskForInteractionControl: (data: Task, agentId: string, hasCustomerLeft?: boolean, isConvNotFound?: boolean) => InteractionControlNS.Interaction | undefined;
    flattenTaskForTaskList: (data: Task, agentId: string) => TaskList.Task;
    isPrimary: (data: Task, agentId: string) => boolean;
    getInteractionId: () => any;
    getTaskIdFromConvId: (convId: string) => Service.Aqm.Contact.AgentContact["data"] | undefined;
    getMediaMgrFromTask: () => string | null;
    getAcceptedTasks: () => {
        mediaResourceId: string;
        eventType: string;
        eventTime?: number | undefined;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        participantId?: string | undefined;
        fromOwner?: boolean | undefined;
        toOwner?: boolean | undefined;
        childInteractionId?: string | undefined;
        interactionId: string;
        campaignId?: string | undefined;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
        isWebCallMute?: boolean | undefined;
        reservationInteractionId?: string | undefined;
        reservedAgentChannelId?: string | undefined;
        monitoringState?: {
            type: string;
        } | undefined;
        supervisorName?: string | undefined;
        callLegType?: {
            type: string;
        } | undefined;
        terminatingParty?: string | undefined;
    }[];
    get getEngagedStatus(): boolean;
    get getIsAgentOnActiveCall(): boolean;
    checkBeforeNavigatingTask(taskId: string): void;
    handleDefaultFocus: () => void;
    get isTelephoneOrMidcall(): boolean;
    checkBeforeSelectingTask(taskId: string, isInteractionMonitoring?: boolean): void;
    checkTelephonyTask: () => boolean;
    setOpenTaskListSortOption(sortOption?: TaskList.SortOption): void;
    checkReplies(): void;
    isTaskRinging(taskId: string): boolean;
    get showNewReplyButton(): boolean;
    get showArrowUp(): boolean;
    isTaskPresent(): boolean;
    isAgentHandlingMoreThanOneTask(): boolean;
    /**
     * Computed block
     */
    get contact(): {
        mediaResourceId: string;
        mediaType: string;
        customerName: string;
        queueId: string;
        enterpriseId: string;
        chatMessages: import("@/../../agentx-services/dist/types/services/cms/types/cms-service.types").ChatTemplateResponse;
    };
    get shouldDisableOutdialForExclusive(): boolean;
    get taskSelected(): InteractionControlNS.Interaction | null;
    get isNotTelephoneOrMidcall(): boolean;
    isCADExpanded: () => boolean;
    get callPersistence(): boolean;
    get isMediaTypeTelePhony(): boolean;
    get taskMapForPopover(): {
        [key: string]: Task;
    };
    get taskArray(): TaskList.Task[];
    get isActiveCall(): boolean;
    get newPopoverCount(): number;
    get isDefinedIvrTranscript(): any;
    get getCallGuideProps(): {
        LCMKey: string | Service.Aqm.Contact.cadOrderData;
        outboundType: string;
        owner: string;
    } | undefined;
    get getCADSectionOpenStatus(): boolean;
    get getMainCadSectionStatus(): boolean;
    get getcheckReplies(): boolean;
    get getConsultCadSectionStatus(): boolean;
    get getSelectedQueueId(): string;
    get getSelectedMediaConversationId(): string;
    setInteractionIds(interactionIds: string[]): void;
    removeAutoCompleteTasks(): void;
    /**
     * Actions block
     */
    selectedTaskChange(taskId: string): void;
    selectedQueueStatsQueueChange(queueId: string): void;
    selectedMediaConversationIdChange(convId: string): void;
    rerenderTaskMap(): void;
    updateLastCompletedTask(taskId: string): void;
    updateCadSectionDimension(key: keyof ModuleAgentContact["interactionControlDimension"], value: number): void;
    setInteractionControlDimensions(): void;
    toggleInteractionControlCADSection(isOpen: boolean): void;
    updateRecordingStatus(taskId: string, isPaused: string): void;
    updateQueueNameInTheTaskBrick(newTask: Task): void;
    updateRecordingProps(newTask: Task): void;
    updateShowNewReply(flag: boolean): void;
    updateShowArrowUp(flag: boolean): void;
    updateHeldUnheldProps(newTask: Task): void;
    updateHeldUnheldPropsMonitoring(newTask: Task): void;
    updateBargeInProps(bargeInDetails: Service.Aqm.Contact.AgentMonitorStateChanged["data"]): void;
    get getAgentCallMonitoringStateDetails(): InteractionControlNS.AgentCallMonitoringState | undefined;
    get getWebexCallingCallId(): string | undefined;
    private readonly getWxCallIdAndDeviceIdForTask;
    setAgentCallMonitoringStateDetails(agentCallMonitoringStateDetails: InteractionControlNS.AgentCallMonitoringState): void;
    updateAgentCallMonitoringStateDetails(task: Task): void;
    updateInteractionAndMediaObjectForMonitorStateChangeEvent(newTask: Task): void;
    removeSupervisorFromInteractionAndMediaObject(newTask: Task): void;
    handleConfParticipantJoined(newTask: Task): void;
    handleConsultedParticipantMoving(newTask: Task): void;
    handleAgentConferenceTransferred(newTask: Task): void;
    updateCadVariable(newTask: Task): void;
    selectNextTask(nextTaskId: string): void;
    updateTask(task: Task): void;
    deleteAndSelectNextTask(taskId: string): void;
    deleteTask(taskId: string, isContactMerged?: boolean): void;
    updateForCTQ(taskId: string): void;
    updateForCTQFailure(task: Task): void;
    updateForConsultFailed(task: Task): void;
    private readonly updateConsultingAgentTask;
    handleAgentConsultFailed(data: Task, agentId: string): void;
    selectAcceptedTask(data: Task, agentId: string): void;
    resetInteractionControlDimensions(): void;
    private readonly checkParticipantNotInInteraction;
    private readonly removeTaskOnConsultEnd;
    private readonly updateInteractionAndMediaObject;
    private readonly updateTaskForParticipant;
    private readonly updateTaskForPersistCallOrMPC;
    getTotalAgentParticipants: (currentParticipants: any) => number;
    getParticipantLeft: (data: Task) => any;
    getParticipantAdded: (data: Task) => any;
    private readonly updateTaskOnParticipantLeft;
    handleConsultUpdate(data: Task, agentId: string): void;
    handleConfParticipantLeft(newTask: Task, agentId: string): void;
    handleContactOwnerChanged(data: Task, agentId?: string): void;
    handleConsulting(data: Task, agentId: string): void;
    updatePopoverCount(popoverCount: number): void;
    selectTaskOnHomeRoute(): void;
    handleContactCleanup(data: ContactCleanup): void;
    handleAbruptMonitoringEnd(): void;
    handleAgentContactAssignFailure: (data: Task) => void;
    handleOutBoundFailed(data: Task): void;
    handleChatConferenceFailed(data: Task): void;
    updateCallMonitoringObjAndTriggerNotification(task: Task): void;
    updatechatConferenceData(data: Store.AgentContact.chatConferenceData): void;
    updateWarnOnNavigation(data: InteractionControlNS.EUpdateNavigationWarning): void;
    resetWarningOnNavigation(): void;
    setMonitoringOwnerName(ownerName: string): void;
    setIsMonitoringNotEndedManually(isEnded: boolean): void;
    setIsCallMuted(muteValue: boolean): void;
    toggleCallMuted(): void;
    get checkBeforeNavigation(): boolean;
}
declare module "@/store" {
    namespace Store.AgentContact {
        type chatConferenceData = {
            interactionId: string;
            destAgentId: string;
            initiateConferenceChat: boolean;
            agentId: string;
        };
    }
}
export declare const agentContact: ModuleAgentContact;
/**
 * @typedef  {Object} ChatConferenceData
 * @summary Store.AgentContact.chatConferenceData
 * @description Chat Conference Data
 * @property {String} interactionId="" Unique identifier of the user interaction.
 * @property {String} destAgentId="" Unique identifier of the destination/secondary agent.
 * @property {Boolean} initiateConferenceChat=false Determines whether chat conference can be initiated or not.
 * @property {String} agentId="" Unique identifier of the agent.
 */
/**
 * @typedef  {Object} agentContact
 * @summary $STORE.agentContact
 * @property {String} lastCompletedTask="" Unique Identifier for the last wrapped up task.
 * @property {String} selectedTaskId="" Unique Identifier for the selected task.
 * @property {Array<String>}interactionIds=[]] List of unique identifiers of the user interactions.
 * @property {ChatConferenceData} chatConferenceData Chat conference data. [Store.AgentContact.chatConferenceData]
 * @property {Object | null} taskSelected Gives the user interaction details about the selected task.
 */
