import "@/app/components/ConnectionLost";
import "@/app/components/CssDynamic";
import { Store } from "@/store";
import { MobxLitElement } from "@adobe/lit-mobx";
import "@agentx/agentx-mfe-react-based";
import { UserStationLoginTypes } from "@agentx/agentx-mfe-wc-based";
import { ThemeName } from "@momentum-ui/web-components";
import "@uuip/advance-layout";
import { OAuth } from "@uuip/unified-ui-platform";
import { ErrorModal } from "@uuip/unified-ui-platform-common-components";
import "./components/ChangeTeamLoading";
import "./components/EmpyResponsiveWidget";
import "./components/GlobalLiveAnnouncer";
import "./components/QualityMonitoringWidgetWrapper";
import "./components/UpdateProfileSettingsLoading";
import "./components/WebCallingWidget";
import "./components/WebexCallingWidget";
declare global {
    interface Window {
        wxcc: any;
    }
}
export declare const TIME_TO_REQUEST_CI_LOGIN = "time-to-request-ci-login";
export declare const TIME_TO_PERFORM_CI_LOGIN = "time-to-perform-ci-login";
export declare const TIME_TO_LOAD_APPLICATION_UI = "time-to-load-application-ui";
declare const App_base: typeof MobxLitElement & (new (...args: any[]) => import("@uuip/unified-ui-platform-sdk").I18N.I18nElement);
export declare class App extends App_base {
    private isInitialized;
    private readonly isIframe;
    private isLoggedIn;
    private isConnectionLost;
    private isRestoreFailed;
    private isSessionExpired;
    private isrequestedIframeLogin;
    private isrequestedIframeLogout;
    private isMultiLogin;
    private cachedLayoutConfig;
    private isNotifsSuccess;
    private isWebexCallingDeviceRegistered;
    private isNoVoiceOptions;
    private messageHandler;
    private isReload;
    /**
     * Init Routing
     */
    private readonly agentXAppRouting;
    private idleActivity;
    private agentXRoutingStart;
    private agentXRoutingStop;
    shouldCollapseTaskListWhenResized: () => boolean;
    onResize: () => void;
    shouldReloadForNewVersion: () => boolean;
    processIframeAuthMessage: (event: any) => void;
    handlePopState: (event: PopStateEvent) => boolean;
    listenIframeAuthMessage: () => void;
    /**
     * End init routing
     */
    isEnvironmentProd: () => boolean | undefined;
    logUnloadEvent: () => void;
    enableFocus: () => void;
    disableFocus: () => void;
    deregisterDevices: () => void;
    constructor();
    connectedCallback(): Promise<void>;
    connectedCallbackCompletion(isReloadFunc?: () => boolean): Promise<void>;
    updateResponsiveList: (e: any) => void;
    getSubStatus(auxCodeId: string | undefined): Promise<string>;
    onCiLoginSuccess(token: OAuth.Token): Promise<void>;
    private initLogRocket;
    private storeAuthToken;
    private fetchAndVerifyMeDetails;
    private setupSplitIOClient;
    private storeAgentDetails;
    private initDependenciesAndFinishSetup;
    sendReloadMetricEvent: () => Promise<void>;
    getTheme(): ThemeName;
    private shouldHandleReloadErrors;
    private reloadAgent;
    private reloginAqm;
    private readonly handleConnectionLost;
    loginWindow: any;
    private requestIframeLogin;
    disconnectedCallback(): void;
    static get styles(): import("lit-element").CSSResult;
    private dispatchTelemetryEvent;
    private handleWebexStateSync;
    private storeTimeToPerformCiLogin;
    stationLoginSuccess(e: UserStationLoginTypes.ESuccess): Promise<void>;
    handleWebexRegister(): Promise<void>;
    updateLayout(teamId: string): Promise<void>;
    updateWebexWithCallingNotificationSetting(): void;
    stationLoginError(e: UserStationLoginTypes.EError): Promise<void>;
    noVoiceOptionsError(e: Store.Session.ModuleErrorDialog.EErrorDetail): void;
    onStationLoginSuccess(e: any): void;
    onLogoutConfirm(e: Store.Session.ModuleErrorDialog.EErrorDetail): void;
    errorModalDisplay(e: ErrorModal.EModalShow): void;
    createAnalyzerSession(): {};
    loadAcqueonScript(): void;
    loadRTDWC(): void;
    rtdcSubscriptionLog(event: any): void;
    initializeRTDWC(): void;
    initializeRTDWCV2(): void;
    initializeIdleActivity(): void;
    removeIdleActivity(): void;
    shouldRenderConnectionLost(): boolean;
    get themeClassMap(): {
        "is-visual-rebrand": boolean;
    };
    render(): import("lit-element").TemplateResult;
    private handleUserPreferenceStorageUpdate;
}
export {};
