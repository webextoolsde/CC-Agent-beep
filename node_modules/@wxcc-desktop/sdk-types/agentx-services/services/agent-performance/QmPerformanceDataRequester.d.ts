import { AgentPerformanceTypes } from "./agent-performance-types";
export declare class QmPerformanceDataRequester {
    private readonly http;
    fetchQmPerformanceData(params: {
        orgId: string;
        startDate: number;
        endDate: number;
        channelFilters: string[];
        directionFilters: string[];
    }): Promise<QmServiceTypes.PerformanceDataResultsMap>;
    fetchAgentPerformanceScoresData(params: {
        orgId: string;
        startTime: number;
        endTime: number;
        agentIds: string[];
    }): Promise<AgentPerformanceTypes.FetchAgentPerformanceScoresResponse>;
}
export declare namespace QmServiceTypes {
    enum MetadataColumn {
        AgentName = "agentName",
        AgentId = "agentId",
        AgentEmail = "agentEmail",
        TeamName = "teamName",
        TeamId = "teamId",
        SiteName = "siteName",
        SiteId = "siteId",
        AgentTeamComparisons = "agentTeamComparisons"
    }
    enum CoreMetricColumn {
        ConnectedCount = "connectedCount",
        ConnectedDurationMs = "connectedDurationMs",
        AverageHandleTimeMs = "averageHandleTimeMs",
        ConsultRequestCount = "consultRequestCount",
        ConsultRequestDurationMs = "consultRequestDurationMs",
        ConsultRequestCountPerInteraction = "consultRequestCountPerInteraction",
        ConsultAnswerCount = "consultAnswerCount",
        AverageConsultDuration = "averageConsultDuration",
        HoldCount = "holdCount",
        HoldDurationMs = "holdDurationMs",
        HoldCountPerCall = "holdCountPerCall",
        HoldDurationRatioMs = "holdDurationRatioMs",
        AverageHoldDuration = "averageHoldDuration",
        TransferCount = "transferCount",
        TransferCountPerInteraction = "transferCountPerInteraction",
        AverageWrapupDurationMs = "averageWrapupDurationMs",
        Occupancy = "occupancy",
        AverageEvaluationScore = "averageEvaluationScore",
        AutoCSAT = "autoCSAT",
        SentimentScore = "sentimentScore",
        TimeBetweenChatReplies = "chatIntervalDuration",
        CrossTalk = "crossTalk",
        TalkRatio = "talkRatio",
        SilenceMonitor = "silenceMonitor",
        TotalLoggedInDuration = "totalLoggedInDuration"
    }
    type TeamInfo = {
        name: string;
        id: string;
        siteName: string;
        siteId: string;
    };
    enum ChannelType {
        Telephony = "telephony",
        Chat = "chat",
        Email = "email",
        Social = "social"
    }
    enum DirectionType {
        Inbound = "inbound",
        Outbound = "outbound"
    }
    type ChannelTypeValues = {
        [K in ChannelType]?: number | null;
    } & {
        all: number | null;
    };
    type MetricDirectionData = {
        inbound?: ChannelTypeValues;
        outbound?: ChannelTypeValues;
        both: ChannelTypeValues;
    };
    type AgentInfo = {
        name: string;
        id: string;
        email: string;
        totalLoggedInDurationMs: number;
        occupancy: number;
        anomalies?: {};
    };
    type AgentSessionsResult = {
        agent: AgentInfo;
        team: TeamInfo;
    } & {
        [K in CoreMetricColumn]?: MetricDirectionData;
    };
    type TeamAvgSessionsResult = {
        team: TeamInfo;
    } & {
        [K in CoreMetricColumn]?: MetricDirectionData;
    };
    type PerformanceDataResultsMap = {
        agents: AgentSessionsResult[];
        teamAverages: TeamAvgSessionsResult[];
    };
}
