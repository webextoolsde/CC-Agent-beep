import { AgentPerformanceTypes } from "./agent-performance-types";
import { QmServiceTypes } from "./QmPerformanceDataRequester";
export type DataFetcherValueKeyValueType = {
    [key: string]: DataFetcherValueType;
};
export type DataFetcherAgentValueType = {
    name: string;
    email: string;
};
export type DataFetcherDurationValueType = {
    duration: number;
    isActive?: boolean;
    createdTime?: number;
};
export type DataFetcherRelationshipValueType = {
    column: string;
    columnValue: DataFetcherValueType;
    comparisonColumn: string;
    comparisonColumnValue: DataFetcherValueType;
    isAnomaly: boolean;
};
export type DataFetcherPercentageValueType = {
    ratio?: number;
};
export type DataFetcherValueType = string | number | boolean | DataFetcherValueKeyValueType[] | DataFetcherAgentValueType | DataFetcherDurationValueType | DataFetcherPercentageValueType | DataFetcherRelationshipValueType[] | null | undefined;
export declare class DataFetcher {
    fetchPerformanceData(startTime: number, endTime: number, columns?: AgentPerformanceTypes.DataFetcherTypes.AllColumnTypes[], channelFilters?: QmServiceTypes.ChannelType[], directionFilters?: QmServiceTypes.DirectionType[]): Promise<[
        AgentPerformanceTypes.DataFetcherTypes.Table,
        AgentPerformanceTypes.DataFetcherTypes.AgentsDetailedPerformanceData
    ]>;
    private getQmAgentPerformanceData;
    private processAgentEvalScore;
    private getTotalLoggedInDuration;
    private getOccupancy;
    private processSessions;
    private computeAnomalies;
    private computeAverage;
    private computeAverageHandleTime;
    private processTeamSessions;
    private getTeamPerformanceData;
    private getAggregationValue;
    private getAggregationValueUsingServiceColumn;
    private getAgentPerformanceData;
    private getQmServicePerformanceData;
    private readonly getDurationObject;
    private readonly getPercentageObject;
    private processQmPerformanceDataForColumns;
    private isMetadataColumn;
    private isTeamAvgColumn;
    private handlePermanentColumnDataForRow;
    private handleCoreColumnTypeDataForRow;
    private handleDetailedMetricData;
    private processPerformanceTotalData;
    private getDataFetcherValueType;
    private extractDataPointTotal;
    private processDetailedPerformanceData;
    private getEvaluationScoreData;
    private columnNamesToServiceColumns;
    private isEvaluationScoreColumn;
    private isDurationColumn;
    private readonly requiredAgentColumns;
    private readonly requiredTeamColumn;
    private readonly forbiddenTeamColumns;
}
