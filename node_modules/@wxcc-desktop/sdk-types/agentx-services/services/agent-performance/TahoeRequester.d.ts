export declare enum TahoeColumnType {
    AgentName = 1,
    AgentId = 2,
    AgentEmail = 3,
    ConnectedCount = 4,
    ConnectedDuration = 5,
    ConsultRequestCount = 6,
    ConsultRequestDuration = 7,
    ConsultAnswerCount = 8,
    HoldCount = 9,
    HoldDuration = 10,
    TeamId = 11,
    TeamName = 12,
    SiteName = 13,
    TransferCount = 14,
    NumAgentsInTeam = 15,
    WrapupDuration = 16,
    SumStartTimes = 17,
    SumEndTimes = 18,
    OutdialCount = 19,
    OutdialConnectedCount = 20,
    OutdialConnectedDuration = 21,
    OutdialConsultRequestCount = 22,
    OutdialConsultRequestDuration = 23,
    OutdialConsultAnswerCount = 24,
    OutdialHoldCount = 25,
    OutdialHoldDuration = 26,
    OutdialTransferCount = 27,
    OutdialWrapupDuration = 28
}
export declare namespace AgentPerformanceServiceTypes {
    type SearchResults = {
        data: {
            agentSession: {
                agentSessions: AgentSessionMap[];
            };
        };
    };
    type AgentSessionMap = {
        agentId: string;
        agentName: string;
        userLoginId: string;
        siteName: string;
        teamId: string;
        teamName: string;
        aggregation: AggregationMap[];
    };
    type AggregationMap = {
        name: string;
        value: string | number;
    };
}
export declare class TahoeRequester {
    private readonly http;
    private readonly performanceServiceFields;
    constructor();
    private buildFilterFields;
    private buildFilterQuery;
    private buildAggregationFields;
    private buildFieldsString;
    private getServiceField;
    private buildAgentSessionQuery;
    getAggregationName(columnType: TahoeColumnType): string;
    fetchAgentPerformanceData(p: {
        startTime: number;
        endTime: number;
        columns: TahoeColumnType[];
        filterKeyValues?: [TahoeColumnType, string][];
    }): Promise<AgentPerformanceServiceTypes.SearchResults>;
}
