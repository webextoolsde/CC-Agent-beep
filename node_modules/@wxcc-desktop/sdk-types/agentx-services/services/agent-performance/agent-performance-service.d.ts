import { Service } from "../../index";
import { AgentPerformanceTypes } from "./agent-performance-types";
import { QmServiceTypes } from "./QmPerformanceDataRequester";
export declare class AgentPerformanceService {
    fetchPerformanceData(startTime: number, endTime: number, columns?: AgentPerformanceTypes.DataFetcherTypes.AllColumnTypes[], channelFilters?: QmServiceTypes.ChannelType[], directionFilters?: QmServiceTypes.DirectionType[]): Promise<[
        AgentPerformanceTypes.DataFetcherTypes.Table,
        AgentPerformanceTypes.DataFetcherTypes.AgentsDetailedPerformanceData
    ]>;
    private readonly http;
    fetchEvaluationForm(params: {
        orgId: string;
        formId: string;
    }): Promise<AgentPerformanceTypes.FormResponse>;
    /**
     * Fetches evaluation forms for a given organization.
     * If no status is provided, it fetches all non-archived forms.
     *
     * **Note**: Endpoint is server-side paginated, with a hard limit of 100 records per request.
     */
    fetchOrgEvaluationForms(params: {
        orgId: string;
        page?: number;
        pageSize?: number;
        status?: AgentPerformanceTypes.EvaluationStatus;
    }): Promise<AgentPerformanceTypes.FetchOrgFormsResponse>;
    fetchAIAssistedEvaluations(params: {
        orgId: string;
        interactionId: string;
    }): Promise<AgentPerformanceTypes.AIAssistedEvaluationResponse>;
    fetchAIAssistedEvaluation(params: {
        orgId: string;
        interactionId: string;
        formId: string;
    }): Promise<AgentPerformanceTypes.AIAssistedEvaluationResponse>;
    triggerAIEvaluation(params: {
        orgId: string;
        formId: string;
        interaction: AgentPerformanceTypes.Interaction;
        transcript: Service.QMW.TranscriptionJson;
    }): Promise<{}>;
    saveEvaluationForm(params: {
        orgId: string;
        data: AgentPerformanceTypes.FormDefinition;
    }): Promise<AgentPerformanceTypes.FormDefinition>;
    updateEvaluationForm(params: {
        orgId: string;
        formId: string;
        data: AgentPerformanceTypes.FormDefinition;
    }): Promise<AgentPerformanceTypes.FormDefinition>;
    createEvaluation(params: {
        orgId: string;
        data: AgentPerformanceTypes.EvaluationDefinition;
    }): Promise<AgentPerformanceTypes.EvaluationDefinition>;
    deleteEvaluationForm(params: {
        orgId: string;
        formId: string;
    }): Promise<{}>;
    archiveEvaluationForm(params: {
        orgId: string;
        formId: string;
    }): Promise<{}>;
    publishEvaluationForm(params: {
        orgId: string;
        formId: string;
    }): Promise<AgentPerformanceTypes.FormDefinition>;
    fetchEvaluationFormStats(params: {
        orgId: string;
        startTime: number;
        endTime: number;
    }): Promise<AgentPerformanceTypes.FormStats[]>;
    assignTeamsToForm(params: {
        orgId: string;
        formId: string;
        teamIds: string[];
        frequency?: number;
    }): Promise<{}>;
    fetchAssignedTeamIds(params: {
        orgId: string;
        formId: string;
        page?: number;
        pageSize?: number;
    }): Promise<string[]>;
    assignQueuesToForm(params: {
        orgId: string;
        formId: string;
        queueIds: string[];
        frequency?: number;
    }): Promise<{}>;
    fetchAssignedQueueIds(params: {
        orgId: string;
        formId: string;
        page?: number;
        pageSize?: number;
    }): Promise<string[]>;
    fetchEvaluations(params: {
        interactionId: string;
        orgId: string;
    }): Promise<AgentPerformanceTypes.EvaluationDefinition[]>;
    saveEvaluation(params: {
        orgId: string;
        evaluationId: string;
        data: AgentPerformanceTypes.EvaluationDefinition;
    }): Promise<AgentPerformanceTypes.EvaluationDefinition>;
    publishEvaluation(params: {
        orgId: string;
        evaluationId: string;
    }): Promise<AgentPerformanceTypes.EvaluationDefinition>;
    archiveEvaluation(params: {
        orgId: string;
        evaluationId: string;
    }): Promise<{}>;
}
type ErrDetails = {
    trackingId: string;
    msg: string;
    statusCode: number;
    retryAfter: string;
};
export type agentPerformanceErrorIds = {
    "Service.agentPerformance.fetchAgentPerformanceData": ErrDetails;
    "Service.agentPerformance.fetchQmPerformanceData": ErrDetails;
    "Service.agentPerformance.fetchOrgEvaluationForms": ErrDetails;
    "Service.agentPerformance.fetchEvaluationForm": ErrDetails;
    "Service.agentPerformance.saveEvaluationForm": ErrDetails;
    "Service.agentPerformance.saveEvaluation": ErrDetails;
    "Service.agentPerformance.fetchAIAssistedEvaluations": ErrDetails;
    "Service.agentPerformance.fetchAIAssistedEvaluationsByFormId": ErrDetails;
    "Service.agentPerformance.updateEvaluationForm": ErrDetails;
    "Service.agentPerformance.publishEvaluationForm": ErrDetails;
    "Service.agentPerformance.deleteEvaluationForm": ErrDetails;
    "Service.agentPerformance.publishEvaluation": ErrDetails;
    "Service.agentPerformance.fetchEvaluation": ErrDetails;
    "Service.agentPerformance.createEvaluation": ErrDetails;
    "Service.agentPerformance.archiveEvaluation": ErrDetails;
    "Service.agentPerformance.archiveEvaluationForm": ErrDetails;
    "Service.agentPerformance.triggerAIEvaluation": ErrDetails;
    "Service.agentPerformance.agentPerformanceScores": ErrDetails;
    "Service.agentPerformance.fetchEvaluationFormStats": ErrDetails;
    "Service.agentPerformance.assignTeamsToForm": ErrDetails;
    "Service.agentPerformance.fetchAssignedTeamIds": ErrDetails;
    "Service.agentPerformance.assignQueuesToForm": ErrDetails;
    "Service.agentPerformance.fetchAssignedQueueIds": ErrDetails;
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.agentPerformance": agentPerformanceErrorIds;
        }
    }
}
export {};
