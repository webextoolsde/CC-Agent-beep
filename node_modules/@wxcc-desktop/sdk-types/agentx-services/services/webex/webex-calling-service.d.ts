import { Service } from "../..";
export declare class WebexCallingService {
    private readonly getAccessTokenFunc;
    private readonly wxHttp;
    private readonly wxConfigHttp;
    private readonly httpPost;
    private readonly httpGet;
    private readonly httpPUT;
    private readonly httpPATCH;
    constructor(getAccessTokenFunc: () => string);
    answerCall: (p: {
        callId: string;
        deviceId: string;
        lineOwnerId?: string | undefined;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    rejectCall: (p: {
        callId: string;
        lineOwnerId?: string | undefined;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    muteCall: (p: {
        callId: string;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    unmuteCall: (p: {
        callId: string;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    holdCall: (p: {
        callId: string;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    resumeCall: (p: {
        callId: string;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    sendDTMF: (p: {
        callId: string;
        dtmf: string;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    getCallDetails: (p: {
        callId: string;
    }, cb?: ((res: any) => void | Service.WebexCalling.CallDetails) | undefined) => Promise<Service.WebexCalling.CallDetails>;
    getPreferredPrimaryAnswerEndpoints: (p: unknown, cb?: ((res: any) => void | Service.WebexCalling.WebexCallingPreferredAnswerEndpoints) | undefined) => Promise<Service.WebexCalling.WebexCallingPreferredAnswerEndpoints>;
    getPreferredSecondaryAnswerEndpoints: (p: {
        lineOwnerId: string;
    }, cb?: ((res: any) => void | Service.WebexCalling.WebexCallingPreferredAnswerEndpoints) | undefined) => Promise<Service.WebexCalling.WebexCallingPreferredAnswerEndpoints>;
    setPreferredPrimaryAnswerEndpoint: (p: {
        preferredAnswerEndpointId: string;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    setPreferredSecondaryAnswerEndpoint: (p: {
        lineOwnerId: string;
        preferredAnswerEndpointId: string;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    getExtensionDetails: (p: unknown, cb?: ((res: any) => void | Service.WebexCalling.ContactCenterExtensions) | undefined) => Promise<Service.WebexCalling.ContactCenterExtensions>;
    private getRequestHeaders;
}
declare module "../../index" {
    namespace Service.WebexCalling {
        type CallDetails = {
            muted: boolean;
            held: boolean;
        };
        type WebexCallAnswerEndpoint = {
            id: string;
            type: string;
            name: string;
            isPreferredAnswerEndpoint: boolean;
        };
        type WebexCallingPreferredAnswerEndpoints = {
            endpoints: WebexCallAnswerEndpoint[];
        };
        type EndpointStatus = "CONNECTED" | "NOT_CONNECTED";
        type EndpointType = "CALLING_DEVICE" | "APPLICATION" | "HOTDESKING_GUEST";
        type ExtensionEndpoint = {
            id: string;
            type: EndpointType;
        };
        type ExtensionDetails = {
            directNumber?: string;
            extension?: string;
            type?: "PRIMARY" | "SECONDARY";
            lineOwnerType?: "PEOPLE" | "PLACE" | "VIRTUAL_LINE";
            lineOwnerId?: string;
            preferredAnsweringEndPointId?: string;
            endpoints?: ExtensionEndpoint[];
        };
        type EndpointDetails = {
            id: string;
            type: EndpointType;
            name: string;
            status?: EndpointStatus;
        };
        type ContactCenterExtensions = {
            url: string;
            ccExtensions: ExtensionDetails[];
            endpoints?: EndpointDetails[];
        };
    }
}
