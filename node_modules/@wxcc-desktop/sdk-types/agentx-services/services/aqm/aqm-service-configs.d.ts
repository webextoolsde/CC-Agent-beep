import { AqmReqs, Msg } from "../../core/aqm-reqs";
import { Service } from "../../index";
import * as AqmConfigType from "./types/aqm-service-configs.types";
import Configs = Service.Aqm.Configs;
export declare function aqmConfigs(aqm: AqmReqs): {
    application: import("../../core/aqm-reqs").ResEmpty<Configs.AgentPropertyChanged>;
    eUpdateAgentProfile: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Configs.UpdateAgentProfile> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Configs.UpdateAgentProfile) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Configs.UpdateAgentProfile>;
    };
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.aqm.configs": {
                "Service.aqm.configs.application": AqmConfigType.ErrDetails;
                "Service.aqm.configs.teams": AqmConfigType.ErrDetails;
            };
        }
    }
}
declare module "../../index" {
    namespace Service.Aqm.Configs {
        type WrapupData = AqmConfigType.WrapupData;
        type AgentPropertyChanged = Msg<AqmConfigType.AgentPropertyChanged>;
        type UpdateAgentProfile = Msg<AqmConfigType.UpdateAgentProfile>;
        type WrapUpReason = AqmConfigType.WrapUpReason;
        type CadVariables = AqmConfigType.CadVariables;
        type CallVariablesSuppressed = AqmConfigType.CallVariablesSuppressed;
        type Entity = AqmConfigType.Entity;
        type AuxCodeType = AqmConfigType.AuxCodeType;
        type DefaultAuxCodes = AqmConfigType.DefaultAuxCodes;
        type agentStateIdleCodes = AqmConfigType.AgentStateIdleCodes;
        type agentWrapUpCodes = AqmConfigType.AgentWrapUpCodes;
        type agentDefaultWrapupCode = AqmConfigType.AgentDefaultWrapupCode;
        type DialPlan = AqmConfigType.DialPlan;
        type Channels = AqmConfigType.Channels;
        type ChannelList = AqmConfigType.ChannelList;
        type AuxCodePayload = AqmConfigType.AuxCodePayload;
        type PaginatedAuxCode = AqmConfigType.PaginatedAuxCode;
        type ChannelCount = Record<Channels, number>;
        type AgentChannelTypeStates = {
            agentState: string;
            pendingIdle: boolean;
            auxCodeId?: string | null;
            availableChannelCount: number;
            manuallyAssignedChannelCount?: number | null;
            manuallyAssignedAvailableChannelCount?: number | null;
            totalManuallyAssignedChannelCount?: number | null;
            totalChannelCount: number;
            stateChangeTimestamp: number;
            stateChangeReason: string;
            lastIdleCodeChangeTimestamp?: number | null;
        };
        type GranularAgentStateProps = {
            isMultiChannel: boolean;
            agentStateIdleCodes: AqmConfigType.AgentStateIdleCodes;
            currentUserId: string;
            orgId: string;
            featureFlags: {
                isWxccCoreDisallowPendingLogoutStateChangeEnabled: boolean;
                isWxccRonaEnhancementsEnabled: boolean;
            };
            channelsStatesMap: Record<AqmConfigType.Channels, Service.Aqm.Configs.AgentChannelTypeStates>;
            lastSetIdleCode: {
                id: string;
                name: string;
            };
            channelTypes: Service.Aqm.Configs.Channels[];
            systemIdleCodes: AqmConfigType.AgentStateIdleCodes | null;
            isWebrtcAndDisconnected: boolean;
        };
    }
}
/**
 * @typedef {Object} Service_Aqm_Configs_Entity
 * @summary Service.Aqm.Configs.Entity
 * @property {Boolean} isSystem Determines whether the entity is generated by the system  or configured by the administrator.
 * @property {String} name Name of the entity.
 * @property {String} id Unique identifier for the entity.
 * @property {Boolean} isDefault Determines whether the entity (idle code) is default or not.
 * The default entity (idle code) will be used as the global state of the agent on initial login.
 */
/**
 * @typedef {Object} Service_Aqm_Configs_WrapupData
 * @summary Service.Aqm.Configs.WrapupData
 * @property {Object} wrapUpProps Wrap up properties.
 * @property {Boolean|Undefined} wrapUpProps.autoWrapup=false Determines whether auto wrap up is enabled or not.
 * @property {Number|Undefined} wrapUpProps.autoWrapupInterval=0 Auto wrap up interval.
 * @property {Array<Service_Aqm_Configs_WrapUpReason>} wrapUpProps.wrapUpReasonList=[]] Wrap up reason list.
 * @property {String} wrapUpProps.interactionId="" Unique identifier of the user interaction.
 * @property {Boolean|Undefined} wrapUpProps.allowCancelAutoWrapup=false Determines whether auto wrap up cancellation is allowed or not.
 */
/**
 * @typedef {Object} Service_Aqm_Configs_WrapUpReason
 * @summary Service.Aqm.Configs.WrapUpReason
 * @property {Boolean} isSystem Determines whether the wrap up reason is generated by the system  or configured by the administrator.
 * @property {String} name Name of the wrap up reason.
 * @property {String} id Unique Identifier for the wrap up reason.
 * @property {Boolean} isDefault Determines whether the wrap up reason is default or not.
 * The default wrap up reason is used in the case of the auto wrap up.
 */
