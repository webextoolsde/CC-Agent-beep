import { AqmReqs, Msg } from "../../core/aqm-reqs";
import { Service } from "../../index";
import AiAssistant = Service.Aqm.AiAssistant;
export declare function aqmAiAssistant(aqm: AqmReqs): {
    eRealtimeTranscriptionAvailable: import("@uuip/unified-ui-platform-sdk").Signal.WithData<AiAssistant.RealtimeTranscription> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: AiAssistant.RealtimeTranscription) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<AiAssistant.RealtimeTranscription>;
    };
    eSuggestedResponseAvailable: import("@uuip/unified-ui-platform-sdk").Signal.WithData<AiAssistant.SuggestedResponse> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: AiAssistant.SuggestedResponse) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<AiAssistant.SuggestedResponse>;
    };
    eSuggestedResponseEnablementEvent: import("@uuip/unified-ui-platform-sdk").Signal.WithData<AiAssistant.SuggestedResponseEnablementEvent> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: AiAssistant.SuggestedResponseEnablementEvent) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<AiAssistant.SuggestedResponseEnablementEvent>;
    };
    eSuggestedResponseAcknowledgeEvent: import("@uuip/unified-ui-platform-sdk").Signal.WithData<AiAssistant.SuggestedResponseAcknowledgeEvent> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: AiAssistant.SuggestedResponseAcknowledgeEvent) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<AiAssistant.SuggestedResponseAcknowledgeEvent>;
    };
    eWellnessBreakEvent: import("@uuip/unified-ui-platform-sdk").Signal.WithData<AiAssistant.WellnessBreakEvent> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: AiAssistant.WellnessBreakEvent) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<AiAssistant.WellnessBreakEvent>;
    };
};
declare module "../../index" {
    namespace Service.Aqm.AiAssistant {
        type RealtimeTranscription = Msg<{
            agentId: string;
            orgId: string;
            notifType: string;
            notifDetails: {
                actionEvent: string;
            };
            data: {
                role: "AGENT" | "CALLER";
                utteranceId: string;
                conversationId: string;
                publishTimestamp: number;
                messageId: string;
                isFinal: boolean;
                languageCode: string;
                orgId: string;
                content: string;
            };
        }>;
        type SuggestedResponse = Msg<{
            agentId: string;
            orgId: string;
            notifType: string;
            notifDetails: {
                actionEvent: string;
            };
            data: {
                conversationId: string;
                suggestionInputTimestamp: number;
                suggestion: string;
                publishTimestamp: number;
                languageCode: string;
                suggestionSource: string;
                adaptiveCard: any;
                orgId: string;
                trackingId: string;
                adaptiveCardId: string;
                type: string;
            };
        }>;
        type SuggestedResponseAcknowledgeEvent = Msg<{
            agentId: string;
            orgId: string;
            notifType: string;
            notifDetails: {
                actionEvent: string;
            };
            data: {
                conversationId: string;
                publishTimestamp: number;
                languageCode: string;
                adaptiveCard: any;
                orgId: string;
                adaptiveCardId: string;
                type: string;
            };
        }>;
        type SuggestedResponseEnablementEvent = Msg<{
            agentId: string;
            orgId: string;
            notifType: string;
            notifDetails: {
                actionEvent: string;
            };
            data: {
                conversationId: string;
                orgId: string;
                publishTimestamp: number;
                enabled: boolean;
            };
        }>;
        type WellnessBreakEvent = Msg<{
            agentId: string;
            orgId: string;
            notifType: string;
            notifDetails: {
                actionEvent: string;
                actionText?: string;
            };
            data: {
                orgId: string;
                agentSessionId: string;
                InteractionId?: string;
            };
        }>;
    }
}
