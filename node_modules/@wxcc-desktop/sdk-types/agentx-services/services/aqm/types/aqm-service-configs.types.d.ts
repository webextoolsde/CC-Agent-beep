export type ErrDetails = {
    status: number;
    type: string;
    trackingId: string;
};
export type WrapupData = {
    wrapUpProps: {
        autoWrapup: boolean | undefined;
        autoWrapupInterval: number | undefined;
        lastAgentRoute: boolean | undefined;
        wrapUpReasonList: Array<WrapUpReason>;
        wrapUpCodesList?: Array<string>;
        idleCodesAccess?: "ALL" | "SPECIFIC";
        interactionId: string;
        allowCancelAutoWrapup: boolean | undefined;
    };
};
export type AgentPropertyChanged = {
    data: {
        "std.teamIdsCSV": string;
        protocolVersion: string;
        "std.siteName": string;
        "std.enterpriseId": string;
        "std.status": string;
        "std.defaultDn": string;
        "std.userRealName": string;
        "std.teamNamesCSV": string;
        "std.agentName": string;
        skillProfileId: string;
        agentProfileIDsCSV: string;
        attribute: {
            name: string;
            value: string;
        }[];
        "std.agentId": string;
        "std.siteId": string;
        "std.subStatus": string;
        lostConnectionRecoveryTimeout: string;
        cadVariables: CadVariables[];
        callVariablesSuppressed: CallVariablesSuppressed;
        agentAnalyzerId: string;
    };
    jsMethod: "agentPropertyChanged";
    callData: string;
    agentSessionId: string;
};
export type UpdateAgentProfile = {
    data: {
        "agent-profile": {
            xmlns: string;
            entityList: {
                type: string;
                entity: Entity[];
            }[];
            dialPlan: DialPlan;
            outDialEp: string;
            "profile-attribute": {
                name: string;
                value: string;
            }[];
            wrapUpData: WrapupData;
        };
    };
    jsMethod: "updateAgentProfile";
    agentSessionId: string;
};
export type WrapUpReason = {
    isSystem: boolean;
    name: string;
    id: string;
    isDefault: boolean;
};
export type CadVariables = {
    name: string;
    status: number;
    agentEditable: boolean;
    agentViewable?: boolean;
};
export type CallVariablesSuppressed = string[];
export type Entity = {
    isSystem: boolean;
    name: string;
    id: string;
    isDefault: boolean;
};
export type EntityArray = Entity[];
export type AuxCodeType = "IDLE_CODE" | "WRAP_UP_CODE";
export type DefaultAuxCodes = Entity & {
    workTypeCode: AuxCodeType;
};
export type DefaultAuxCodesArray = DefaultAuxCodes[];
export type AgentStateIdleCodes = {
    data: Entity[];
    meta: {
        links: {
            first: string;
            last: string;
            next?: string;
            self: string;
        };
        orgid: string;
        page: number;
        pageSize: number;
        totalPages: number;
        totalRecords: number;
    };
};
export type AgentWrapUpCodes = {
    data: Entity[];
    meta: {
        links: {
            first: string;
            last: string;
            next: string;
            self: string;
        };
        orgid: string;
        page: number;
        pageSize: number;
        totalPages: number;
        totalRecords: number;
    };
};
export type AgentDefaultWrapupCode = {
    id: string;
    name: string;
};
export type DialPlan = {
    type: "adhocDial";
    dialPlanEntity: {
        regex: string;
        prefix: string;
        strippedChars: string;
        name: string;
    }[];
};
export type Channels = "telephony" | "chat" | "email" | "social" | "voice" | string;
export type ChannelList = {
    name: string;
    value: Channels;
}[];
export type AuxCodePayload = {
    workType: AuxCodeType;
    page?: number;
    pageSize?: number;
    search?: string;
    customFilter?: string;
    supervisedUserId?: string;
    desktopProfileFilter?: boolean;
};
export type PaginatedAuxCode = AgentStateIdleCodes | AgentWrapUpCodes;
