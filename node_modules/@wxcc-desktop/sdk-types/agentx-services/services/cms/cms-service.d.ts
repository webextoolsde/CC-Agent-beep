import { Service } from "../../index";
import * as CmsServiceTypes from "./types/cms-service.types";
import Cms = Service.Cms;
export declare function cmsService(): {
    fetchChatResponses: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.ChatTemplateResponse) | undefined) => Promise<CmsServiceTypes.ChatTemplateResponse>;
    fetchTeamsById: (p: {
        orgId: string;
        teamId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.TeamResponseData) | undefined) => Promise<CmsServiceTypes.TeamResponseData>;
    fetchTeamsByPage: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: any) => void | (CmsServiceTypes.TeamResponse & CmsServiceTypes.ManagedTeamResponse)) | undefined) => Promise<CmsServiceTypes.TeamResponse & CmsServiceTypes.ManagedTeamResponse>;
    fetchQueuesByPage: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.ManagedQueueResponse) | undefined) => Promise<CmsServiceTypes.ManagedQueueResponse>;
    fetchOrgLevelQueuesByPage: (p: {
        orgId: string;
        page: number;
        pageSize: number;
        filter?: string | undefined;
        search?: string | undefined;
        desktopProfileFilter?: boolean | undefined;
    }, cb?: ((res: any) => void | CmsServiceTypes.QueueListResponse) | undefined) => Promise<CmsServiceTypes.QueueListResponse>;
    fetchDesktopLayout: (p: {
        orgId: string;
        desktopLayoutId?: string | undefined;
    }, cb?: ((res: any) => void | CmsServiceTypes.DesktopLayoutResponse) | undefined) => Promise<CmsServiceTypes.DesktopLayoutResponse>;
    fetchGlobalDesktopLayoutV2: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.GlobalDesktopLayoutResponseMappingV2) | undefined) => Promise<CmsServiceTypes.GlobalDesktopLayoutResponseMappingV2>;
    fetchUserRecord: (p: {
        userId: string;
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.UserRecordResponse) | undefined) => Promise<CmsServiceTypes.UserRecordResponse>;
    fetchUserRecordByUserId: (p: {
        userId: string;
        orgId: string;
        includeSkillProfileAudit?: boolean | undefined;
    }, cb?: ((res: any) => void | CmsServiceTypes.UserRecordResponse) | undefined) => Promise<CmsServiceTypes.UserRecordResponse>;
    fetchUserProfile: (p: {
        profileId: string;
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.UserProfileResponse) | undefined) => Promise<CmsServiceTypes.UserProfileResponse>;
    fetchEntryPointsByPage: (p: {
        orgId: any;
        url: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.EntryPointsResponse) | undefined) => Promise<CmsServiceTypes.EntryPointsResponse>;
    fetchDialNumberList: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.DialNumberResponse) | undefined) => Promise<CmsServiceTypes.DialNumberResponse>;
    fetchAddressBookByPage: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.AddressBookResponse) | undefined) => Promise<CmsServiceTypes.AddressBookResponse>;
    fetchOrgUrlMappingByNameV2: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.OrgUrlMappingResponse) | undefined) => Promise<CmsServiceTypes.OrgUrlMappingResponse>;
    fetchMicrosoftConfigData: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.MicrosoftOrgConfig) | undefined) => Promise<CmsServiceTypes.MicrosoftOrgConfig>;
    fetchWebexConfigData: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.WebexOrgConfig) | undefined) => Promise<CmsServiceTypes.WebexOrgConfig>;
    fetchAIGeneratedSummaries: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.AIGeneratedSummaries) | undefined) => Promise<CmsServiceTypes.AIGeneratedSummaries>;
    fetchAIAgentBurnout: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.AIAgentBurnout) | undefined) => Promise<CmsServiceTypes.AIAgentBurnout>;
    fetchOrganizationSettings: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.OrganizationSettingsResponse) | undefined) => Promise<CmsServiceTypes.OrganizationSettingsResponse>;
    fetchAIFeature: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.AIFeatureResponse) | undefined) => Promise<CmsServiceTypes.AIFeatureResponse>;
    fetchQueueDetailsById: (p: {
        orgId: string;
        queueId: string;
        agentsUpdatedInfo?: boolean | undefined;
    }, cb?: ((res: any) => void | CmsServiceTypes.QueueDetailsResponseData) | undefined) => Promise<CmsServiceTypes.QueueDetailsResponseData>;
    reassignQueueAgentsData: (p: {
        orgId: string;
        queueId: string;
        addedAgents: Array<string>;
        removedAgents: Array<string>;
    }, cb?: ((res: any) => void | Cms.NoContentResponse) | undefined) => Promise<Cms.NoContentResponse>;
    fetchSkillProfiles: (p: {
        orgId: string;
        pageSize?: number | undefined;
        page?: number | undefined;
        search?: string | undefined;
    }, cb?: ((res: any) => void | CmsServiceTypes.SkillProfilesResponse) | undefined) => Promise<CmsServiceTypes.SkillProfilesResponse>;
    fetchSkillProfile: (p: {
        orgId: string;
        skillProfileId: string;
        includeSkillDetails: boolean;
    }, cb?: ((res: any) => void | CmsServiceTypes.SkillProfile) | undefined) => Promise<CmsServiceTypes.SkillProfile>;
    fetchQueueListBySkillProfileId: (p: {
        orgId: string;
        skillProfileId: string;
        page?: number | undefined;
        pageSize?: number | undefined;
    }, cb?: ((res: any) => void | CmsServiceTypes.SkillProfileQueuesResponse) | undefined) => Promise<CmsServiceTypes.SkillProfileQueuesResponse>;
    fetchUsersByPage: (p: {
        orgId: string;
        filter?: string | undefined;
        userInQueue?: boolean | undefined;
        queueId?: string | undefined;
        attributes?: string | undefined;
        sort?: string | undefined;
        page?: number | undefined;
        pageSize?: number | undefined;
        searchValue?: string | undefined;
    }, cb?: ((res: any) => void | CmsServiceTypes.UserDetailResponse) | undefined) => Promise<CmsServiceTypes.UserDetailResponse>;
    fetchConfigLimit: (p: {
        orgId: string;
        limitKey: Cms.ConfigLimitKey;
    }, cb?: ((res: any) => void | CmsServiceTypes.ConfigLimitResponse) | undefined) => Promise<CmsServiceTypes.ConfigLimitResponse>;
    fetchCherryPickEnabledQueues: (p: {
        orgId: string;
        agentId: string;
        teamId: string;
    }, cb?: ((res: any) => void | CmsServiceTypes.CherryPickQueuesResponse) | undefined) => Promise<CmsServiceTypes.CherryPickQueuesResponse>;
    fetchEntryPointForCallback: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.EntryPointsResponseDataForCallback) | undefined) => Promise<Cms.EntryPointsResponseDataForCallback>;
    fetchMicrosoftConfig: (p: {
        orgId: string;
    }, allowRetry?: boolean) => Promise<Cms.MicrosoftOrgConfig>;
    fetchAllTeams: (orgId: string, filter?: false | {
        dbId: string;
    }) => Promise<Cms.AllTeamResponse>;
    fetchAllManagedTeams: (orgId: string) => Promise<Cms.ManagedAllTeamResponse>;
    fetchAllManagedQueues: (orgId: string) => Promise<Cms.ManagedAllQueueResponse>;
    fetchAllEntryPoints: (orgId: string) => Promise<Cms.AllEntryPointResponse>;
    fetchAllAddressBook: (p: {
        orgId: string;
        addressBookId: string;
        allowRetry: boolean;
    }) => Promise<any>;
    reassignQueueAgents: (p: {
        orgId: string;
        queueId: string;
        addedAgents: Array<string>;
        removedAgents: Array<string>;
    }) => Promise<Cms.NoContentResponse>;
    updateUser: (p: {
        userId: string;
        orgId: string;
        data: any;
    }, cb?: ((res: any) => void | CmsServiceTypes.UserRecordResponse) | undefined) => Promise<CmsServiceTypes.UserRecordResponse>;
};
type cmsErrorIds = CmsServiceTypes.cmsErrorIds;
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.cms": cmsErrorIds;
        }
    }
}
declare module "../../index" {
    namespace Service.Cms {
        type NoContentResponse = Record<string, never>;
        type ChatTemplateResponse = CmsServiceTypes.ChatTemplateResponse;
        type ChatTemplate = CmsServiceTypes.ChatTemplate;
        type SplitIOKey = CmsServiceTypes.SplitIOKey;
        type AllTeamResponse = CmsServiceTypes.TeamResponseData[];
        type ManagedAllTeamResponse = CmsServiceTypes.ManagedTeamResponseData[];
        type ManagedAllQueueResponse = CmsServiceTypes.ManagedQueueResponseData[];
        type AllEntryPointResponse = CmsServiceTypes.EntryPointsResponseData[];
        type AllAddressBookResponse = CmsServiceTypes.AddressBookResponseData[];
        type AllDialNumberResponse = CmsServiceTypes.DialNumberResponseData[];
        type AllEntryPointsResponseDataForCallback = EntryPointsResponseForCallbackData[];
        type TeamResponse = CmsServiceTypes.TeamResponse;
        type ManagedTeamResponse = CmsServiceTypes.ManagedTeamResponse;
        type ManagedQueueResponse = CmsServiceTypes.ManagedQueueResponse;
        type EntryPointsResponse = CmsServiceTypes.EntryPointsResponse;
        type AddressBookResponse = CmsServiceTypes.AddressBookResponse;
        type DialNumberResponse = CmsServiceTypes.DialNumberResponse;
        type EntryPointsResponseDataForCallback = {
            meta: {
                links: {
                    next: string;
                };
                totalPages: number;
                totalRecords: number;
            };
            data: AllEntryPointsResponseDataForCallback;
        };
        type fetchTeamsByAgentResponse = CmsServiceTypes.fetchTeamsByAgentResponse;
        type TeamsByAgentMap = CmsServiceTypes.TeamsByAgentMap;
        type EpDnListMap = CmsServiceTypes.EpDnListMap;
        type EpListMap = CmsServiceTypes.EpListMap;
        type AgentIdleCodes = CmsServiceTypes.AgentIdleCodes;
        type AgentDataResponse = CmsServiceTypes.AgentDataResponse;
        type Agent = CmsServiceTypes.Agent;
        type IdleCode = Record<string, any>;
        type OrgIdleCodes = CmsServiceTypes.OrgIdleCodes;
        type DesktopLayoutResponseMapping = CmsServiceTypes.DesktopLayoutResponseMapping;
        type GlobalDesktopLayoutResponseMapping = CmsServiceTypes.GlobalDesktopLayoutResponseMapping;
        type GlobalDesktopLayoutResponseMappingV2 = CmsServiceTypes.GlobalDesktopLayoutResponseMappingV2;
        type TeamResponseData = CmsServiceTypes.TeamResponseData;
        type ManagedTeamResponseData = CmsServiceTypes.ManagedTeamResponseData;
        type ManagedQueueResponseData = CmsServiceTypes.ManagedQueueResponseData;
        type AIGeneratedSummariesResponseData = CmsServiceTypes.AIGeneratedSummariesResponseData;
        type AIAgentBurnoutResponseData = CmsServiceTypes.AIAgentBurnoutResponseData;
        type DesktopLayoutAuxiliaryData = CmsServiceTypes.DesktopLayoutAuxiliaryData;
        type TeamByAgentAuxiliaryDataAttributes = CmsServiceTypes.TeamByAgentAuxiliaryDataAttributes;
        type DesktopLayoutResponse = CmsServiceTypes.DesktopLayoutResponse;
        type DesktopLayoutAuxiliaryDataAttributes = CmsServiceTypes.DesktopLayoutAuxiliaryDataAttributes;
        type UserRecordResponse = CmsServiceTypes.UserRecordResponse;
        type UserProfileAppFeature = CmsServiceTypes.UserProfileAppFeature;
        type UserProfileAppModule = CmsServiceTypes.UserProfileAppModule;
        type EntryPointsResponseForCallbackData = {
            organizationId: string;
            id: string;
            version: number;
            dbId: string;
            name: string;
            description: string;
            entryPointType: string;
            channelType: string;
            active: boolean;
            serviceLevelThreshold: number;
            maximumActiveContacts: number;
            timezone: string;
            links: Array<any>;
            ccOneQueue: boolean;
            createdTime: number;
            lastUpdatedTime: number;
            callbackEnabled?: boolean;
        };
        type AgentRole = CmsServiceTypes.AgentRole;
        type ModuleAccessScope = CmsServiceTypes.ModuleAccessScope;
        type UserProfileResponse = CmsServiceTypes.UserProfileResponse;
        type EntryPointsResponseData = CmsServiceTypes.EntryPointsResponseData;
        type DialNumberResponseData = CmsServiceTypes.DialNumberResponseData;
        type AddressBookResponseData = CmsServiceTypes.AddressBookResponseData;
        type MicrosoftOrgConfig = CmsServiceTypes.MicrosoftOrgConfig;
        type MicrosoftConfigResponse = CmsServiceTypes.MicrosoftConfigResponse;
        type MicrosoftAccountDetails = CmsServiceTypes.MicrosoftAccountDetails;
        type MicrosoftIdleCodes = CmsServiceTypes.MicrosoftIdleCodes;
        type OrgUrlMappingResponse = CmsServiceTypes.OrgUrlMappingResponse;
        type OrgUrlMappingResponseData = CmsServiceTypes.OrgUrlMappingResponseData;
        type WebexOrgConfig = CmsServiceTypes.WebexOrgConfig;
        type AIGeneratedSummaries = CmsServiceTypes.AIGeneratedSummaries;
        type AIAgentBurnout = CmsServiceTypes.AIAgentBurnout;
        type AIFeatureResponseData = CmsServiceTypes.AIFeatureResponseData;
        type RealTimeTranscript = CmsServiceTypes.RealTimeTranscript;
        type SuggestedResponses = CmsServiceTypes.SuggestedResponses;
        type AIFeatureResponse = CmsServiceTypes.AIFeatureResponse;
        type OrganizationSettingsResponse = CmsServiceTypes.OrganizationSettingsResponse;
        type OrganizationSettings = CmsServiceTypes.OrganizationSettings;
        type WebexConfigResponse = CmsServiceTypes.WebexConfigResponse;
        type WebexIdleCodes = CmsServiceTypes.WebexIdleCodes;
        type Queue = CmsServiceTypes.Queue;
        type SkillProfileQueue = CmsServiceTypes.SkillProfileQueue;
        type userDetails = CmsServiceTypes.userDetails;
        type Meta = CmsServiceTypes.Meta;
        type QueueListResponse = CmsServiceTypes.QueueListResponse;
        type SkillProfileQueuesResponse = CmsServiceTypes.SkillProfileQueuesResponse;
        type BuddyAgentListResponse = CmsServiceTypes.BuddyAgentListResponse;
        type EPListResponse = CmsServiceTypes.EPListResponse;
        type QueueDetailsResponseData = CmsServiceTypes.QueueDetailsResponseData;
        type SkillsData = CmsServiceTypes.SkillsData;
        type QueueDetailsAgent = CmsServiceTypes.QueueDetailsAgent;
        type queueDetails = CmsServiceTypes.queueDetails;
        type SkillProfilesResponse = CmsServiceTypes.SkillProfilesResponse;
        type SkillProfilesMetaData = CmsServiceTypes.SkillProfilesMetaData;
        type SkillProfile = CmsServiceTypes.SkillProfile;
        type Skill = CmsServiceTypes.Skill;
        type EnumSkill = CmsServiceTypes.EnumSkill;
        type UserDetailResponse = CmsServiceTypes.UserDetailResponse;
        type UserDetail = CmsServiceTypes.UserDetail;
        type ConfigLimitKey = CmsServiceTypes.ConfigLimitKey;
        type ConfigLimitResponse = CmsServiceTypes.ConfigLimitResponse;
        type CherryPickQueue = CmsServiceTypes.CherryPickQueue;
        type CherryPickQueuesResponse = CmsServiceTypes.CherryPickQueuesResponse;
    }
}
export {};
