import { EntityArray } from "../../aqm/types/aqm-service-configs.types";
export type ChatTemplateResponse = ChatTemplate[];
export type ChatTemplate = {
    id: string;
    name: string;
    language: string;
    status: boolean;
    content: string;
    queueIds: string[];
    links: any;
    createdTime: number;
    lastUpdatedTime: number;
    allQueues?: boolean;
};
export type SplitIOKey = {
    key: string;
};
export type AllTeamResponse = TeamResponseData[];
export type ManagedAllTeamResponse = ManagedTeamResponseData[];
export type ManagedAllQueueResponse = ManagedQueueResponseData[];
export type AllEntryPointResponse = EntryPointsResponseData[];
export type AllAddressBookResponse = AddressBookResponseData[];
export type AllDialNumberResponse = DialNumberResponseData[];
export type TeamResponse = {
    meta: {
        links: {
            next: string;
        };
    };
    data: AllTeamResponse;
};
export type ManagedTeamResponse = {
    meta: {
        links: {
            next: string;
        };
    };
    data: ManagedAllTeamResponse;
};
export type ManagedQueueResponse = {
    meta: {
        links: {
            next: string;
        };
    };
    data: ManagedAllQueueResponse;
};
export type EntryPointsResponse = {
    meta: {
        links: {
            next: string;
        };
    };
    data: AllEntryPointResponse;
};
export type AddressBookResponse = {
    meta: {
        links: {
            next: string;
        };
        totalPages: number;
    };
    data: AllAddressBookResponse;
};
export type DialNumberResponse = {
    meta: {
        links: {
            next: string;
        };
        totalPages: number;
    };
    data: AllDialNumberResponse;
};
export type fetchTeamsByAgentResponse = {
    details: {
        user: TeamsByAgentMap;
    };
};
export type TeamsByAgentMap = {
    id: string;
    type: "user";
    attributes: TeamByAgentAuxiliaryDataAttributes;
};
export type EpDnListMap = {
    name: string;
    dialledNumber: string;
    id?: string;
};
export type EpListMap = {
    name: string;
    id: string;
};
export type AgentIdleCodes = {
    idleCodes: string[];
    accessIdleCode: "ALL" | "SPECIFIC";
};
export type AgentDataResponse = {
    meta: {
        totalRecords: number;
    };
    data: Agent[];
};
export type Agent = {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
};
export type OrgIdleCodes = {
    idleCodes: EntityArray;
};
export type DesktopLayoutResponseMapping = {
    attributes: DesktopLayoutAuxiliaryDataAttributes;
    auxiliaryMetadata: any;
};
export type GlobalDesktopLayoutResponseMapping = {
    auxiliaryDataList: DesktopLayoutAuxiliaryData[];
    auxiliaryMetadata: any;
};
export type GlobalDesktopLayoutResponseMappingV2 = DesktopLayoutResponse[];
export type TeamResponseData = {
    id: string;
    dbId: string;
    active: boolean;
    createdTime: number;
    desktopLayoutId: string;
    lastUpdatedTime: number;
    multiMediaProfileId: string;
    name: string;
    siteId: string;
    skillProfileId?: string;
    teamStatus: string;
    teamType: string;
    userIds?: string[];
};
export type ManagedTeamResponseData = {
    id: string;
    links: [];
    name: string;
    dbId?: string;
    siteId: string;
};
export type ManagedQueueResponseData = {
    id: string;
    links: [];
    name: string;
};
export type AIGeneratedSummariesResponseData = {
    organizationId?: string;
    id: string;
    version?: number;
    callDropSummariesEnabled: boolean;
    virtualAgentTransferSummariesEnabled: boolean;
    consultTransferSummariesEnabled: boolean;
    agentInclusionType: string;
    links: Array<any>;
    createdTime: number;
    lastUpdatedTime: number;
};
export type AIAgentBurnoutResponseData = {
    organizationId?: string;
    id: string;
    version?: number;
    enabled: boolean;
    agentInclusionType: string;
    wellnessBreakReminders: string;
    links: Array<any>;
    createdTime: number;
    lastUpdatedTime: number;
};
export type DesktopLayoutAuxiliaryData = {
    id: string;
    type: "desktop-layout";
    attributes: DesktopLayoutAuxiliaryDataAttributes;
    auxiliaryDataType: string;
};
export type TeamByAgentAuxiliaryDataAttributes = {
    teamInfo__s: any;
};
export type DesktopLayoutResponse = {
    createdTime: number;
    defaultJsonModified: boolean;
    defaultJsonModifiedTime: number;
    description: string;
    editedBy: string;
    global: boolean;
    id: string;
    jsonFileContent: string;
    jsonFileName: string;
    lastUpdatedTime: number;
    modifiedTime: number;
    name: string;
    status: boolean;
    teamIds: string[];
    validated: boolean;
    validatedTime: number;
};
export type DesktopLayoutAuxiliaryDataAttributes = {
    description__s: string;
    jsonFileContent__s: string;
    global__i: number;
    assigned__i: number;
    editedBy__s: string;
    name__s: string;
    cstts: number;
    status__i: number;
    tid: string;
    validatedTime__l: number;
    sid: string;
};
export type UserRecordResponse = {
    organizationId: string;
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    workPhone: string;
    mobile: string;
    ciUserId: string;
    xspVersion: string;
    subscriptionId: string;
    userProfileId: string;
    contactCenterEnabled: boolean;
    siteId: string;
    teamIds: string[];
    skillProfileId: string;
    agentProfileId: string;
    multimediaProfileId: string;
    deafultDialledNumber: string;
    externalIdentifier: string;
    active: boolean;
    imiUserCreated: boolean;
    links: any;
    createdTime: number;
    lastUpdatedTime: number;
    skillProfileUpdatedBy: string;
    skillProfileUpdatedTime: number;
};
export type UserProfileAppFeature = {
    id: string;
    appFeatureId: string;
    appFeatureName: string;
    featureAccessType: "ON" | "OFF";
};
export type UserProfileAppModule = {
    id: string;
    appModuleId: string;
    moduleAccessType: "EDIT" | "VIEW" | "NONE";
    userProfileAppFeature: UserProfileAppFeature[];
};
export type AgentRole = "ADMINISTRATOR" | "ADMINISTRATOR_ONLY" | "SUPERVISOR" | "PREMIUM_AGENT" | "STANDARD_AGENT" | "ANALYZER_ADMINISTRATOR" | "ANALYZER_SUPERVISOR" | "ANALYZER_USER";
export type ModuleAccessScope = "SPECIFIC" | "ALL" | "PROVISIONED_VALUE" | "NONE";
export type UserProfileResponse = {
    id: string;
    name: string;
    description: string;
    profileType: AgentRole;
    accessAllModules: ModuleAccessScope;
    userProfileAppModules: UserProfileAppModule[];
    active: boolean;
    createdTime: number;
    lastUpdatedTime: number;
};
export type EntryPointsResponseData = {
    active: boolean;
    channelType: string;
    createdTime: number;
    description: string;
    entryPointType: string;
    id: string;
    lastUpdatedTime: number;
    links: any;
    maximumActiveContacts: 0;
    name: string;
    routePointId: string;
    serviceLevelThreshold: number;
    subscriptionId: string;
    xspVersion: string;
    version: number;
    ccOneQueue: boolean;
};
export type DialNumberResponseData = {
    organizationId: string;
    id: string;
    version: number;
    dialledNumber: string;
    routePointId: string;
    entryPointId: string;
    defaultAni: boolean;
    links: Array<any>;
    createdTime: number;
    lastUpdatedTime: number;
};
export type AddressBookResponseData = {
    id: string;
    version: number;
    name: string;
    number: string;
    links: Array<any>;
};
export type MicrosoftOrgConfig = {
    meta: {
        links: {
            next?: string;
        };
        totalPages: number;
    };
    data: MicrosoftConfigResponse[];
};
export type MicrosoftConfigResponse = {
    id: string;
    organizationId?: string;
    active: boolean;
    accountDetails: MicrosoftAccountDetails;
    showUserDetails: boolean;
    idleCodes: MicrosoftIdleCodes;
    stateSynchronization: boolean;
    createdTime: number;
    lastUpdatedTime: number;
};
export type MicrosoftAccountDetails = {
    name: string;
    tenantId: string;
    userName: string;
};
export type MicrosoftIdleCodes = {
    doNotDisturbId: string;
    onACallId: string;
    presentingId: string;
};
export type OrgUrlMappingResponse = OrgUrlMappingResponseData[];
export type OrgUrlMappingResponseData = {
    organizationId: string;
    id: string;
    version: number;
    name: string;
    url: string;
    links: Array<any>;
    createdTime: number;
    lastUpdatedTime: number;
};
export type WebexOrgConfig = {
    data: WebexConfigResponse[];
};
export type AIGeneratedSummaries = {
    data: AIGeneratedSummariesResponseData[];
};
export type AIAgentBurnout = {
    meta: Meta;
    data: AIAgentBurnoutResponseData[];
};
export type AIFeatureResponseData = {
    id: string;
    realtimeTranscripts: RealTimeTranscript;
    suggestedResponses: SuggestedResponses;
    links: Array<any>;
    createdTime: number;
    lastUpdatedTime: number;
};
export type RealTimeTranscript = {
    enable: boolean;
    agentInclusionType: string;
};
export type SuggestedResponses = {
    enable: boolean;
};
export type AIFeatureResponse = {
    meta: Meta;
    data: AIFeatureResponseData[];
};
export type OrganizationSettingsResponse = OrganizationSettings[];
export type OrganizationSettings = {
    organizationId?: string;
    id: string;
    aiAssistantQuantity: number;
};
export type WebexConfigResponse = {
    id: string;
    organizationId: string;
    showUserDetails: boolean;
    stateSynchronization: boolean;
    idleCodes: WebexIdleCodes;
    createdTime: number;
    lastUpdatedTime: number;
};
export type WebexIdleCodes = {
    busyId: string;
    doNotDisturbId: string;
    inACalendarMeetingId: string;
    inAMeetingId: string;
    onACallId: string;
    outOfOfficeId: string;
    presentingId: string;
    quietHoursId: string;
};
export type Queue = {
    id: string;
    name: string;
};
export type SkillProfileQueue = {
    id: string;
    channelType: string;
};
export type userDetails = {
    ciUserId: string;
    firstName: string;
    lastName: string;
};
export type Meta = {
    page: number;
    pageSize: number;
    totalPages: number;
    totalRecords: number;
    links: {
        first?: string;
        last?: string;
        next?: string;
        self: string;
    };
    orgid: string;
};
export type QueueListResponse = {
    meta: Meta;
    data: Queue[];
};
export type SkillProfileQueuesResponse = {
    meta: Meta;
    data: SkillProfileQueue[];
};
export type BuddyAgentListResponse = {
    meta: Meta;
    data: userDetails[];
};
export type EPListResponse = {
    meta: Meta;
    data: EpDnListMap[] | EpListMap[];
};
export type QueueDetailsResponseData = {
    id: string;
    queueRoutingType: string;
    routingType: string;
    skillBasedRoutingType?: string;
    queueSkillRequirements?: SkillsData[];
    agentsLastUpdatedTime?: number;
    agentsLastUpdatedByUserName?: string;
    agentsLastUpdatedByUserEmailPrefix?: string;
    createdTime: number;
    name: string;
    agents: QueueDetailsAgent[];
};
export type SkillsData = {
    skillName?: string;
    skillType?: string;
    skillValue?: string;
    condition?: string;
};
export type QueueDetailsAgent = {
    id: string;
    ciUserId: string;
};
export type queueDetails = {
    id: string;
    name: string;
};
export type SkillProfilesResponse = {
    meta: SkillProfilesMetaData;
    data: SkillProfile[];
};
export type SkillProfilesMetaData = {
    page?: number;
    pageSize?: number;
    totalPages?: number;
    totalRecords?: number;
};
export type SkillProfile = {
    id: string;
    name: string;
    activeSkills?: Skill[];
    activeEnumSkills?: EnumSkill[];
};
export type Skill = {
    id: string;
    skillId: string;
    skillName: string;
    textValue?: string;
    booleanValue?: boolean;
    proficiencyValue?: number;
};
export type EnumSkill = {
    id: string;
    enumSkillValueId: string;
    enumSkillName: string;
    enumSkillValue: string;
    enumSkillId: string;
};
export type UserDetailResponse = {
    meta: {
        orgid: string;
        page: number;
        pageSize: number;
        totalPages: number;
        totalRecords: number;
    };
    data: UserDetail[];
};
export type UserDetail = {
    organizationId: string;
    id: string;
    version: number;
    firstName: string;
    lastName: string;
    email: string;
    ciUserId: string;
    userProfileId: string;
    contactCenterEnabled: boolean;
    active: boolean;
    dbId: string;
    imiUserCreated: boolean;
    systemDefault: boolean;
    userLevelBurnoutInclusion: string;
    userLevelAutoCSATInclusion: string;
    userLevelWellnessBreakReminders: string;
    userLevelSummariesInclusion: string;
    links: Array<{
        rel: string;
        href: string;
    }>;
    createdTime: number;
    lastUpdatedTime: number;
};
export type ConfigLimitKey = "contact_service_queue.agent_based.agents" | "contact_service_queue.queue_routing_type.agent_based";
export type ConfigLimitResponse = {
    id: string;
    limitKey: ConfigLimitKey;
    limitValue: number;
};
export type CherryPickQueue = {
    id: string;
    name: string;
};
export type CherryPickQueuesResponse = {
    data: CherryPickQueue[];
};
export type cmsErrorIds = "Service.cms.fetchChatResponses" | "Service.cms.fetchAllTeams" | "Service.cms.fetchTeamsById" | "Service.cms.fetchAllQueues" | "Service.cms.fetchDesktopLayout" | "Service.cms.fetchDefaultDesktopLayout" | "Service.cms.fetchTeamsByAgent" | "Service.cms.fetchManagedTeams" | "Service.cms.fetchUserRecord" | "Service.cms.fetchUserRecordByUserId" | "Service.cms.fetchUserProfile" | "Service.cms.fetchEntryPointsList" | "Service.cms.fetchDialNumberList" | "Service.cms.fetchAddressBookList" | "Service.cms.fetchMicrosoftConfig" | "Service.cms.fetchAIGeneratedSummaries" | "Service.cms.fetchAIAgentBurnout" | "Service.cms.fetchQueueDetailsById" | "Service.cms.fetchAIFeature" | "Service.cms.fetchSkillProfiles" | "Service.cms.fetchSkillProfile" | "Service.cms.fetchUsersByPage" | "Service.cms.fetchConfigLimit" | "Service.cms.fetchCherryPickEnabledQueues" | "Service.cms.updateUser" | "Service.cms.fetchQueueListBySkillProfileId";
