import { Service } from "../../index";
export declare function absService(): {
    fetchAddressBooksCMS: (p: {
        orgId: string;
        addressBookId: string;
        page?: number | undefined;
        search?: string | undefined;
        pageSize?: number | undefined;
    }, cb?: ((res: any) => void | Service.Aqm.Agent.AddressBooks) | undefined) => Promise<Service.Aqm.Agent.AddressBooks>;
    fetchCmsInitConfig: (p: {
        orgId: string;
        userId: string;
        isSupervisor: boolean;
    }, cb?: ((res: any) => void | Service.Conf.Profile) | undefined) => Promise<Service.Conf.Profile>;
    fetchIdleCodes: (p: {
        orgId: string;
        accessType: Service.Conf.Profile["idleCodesAccess"];
        ids?: string[] | undefined;
    }, cb?: ((res: any) => void | import("../aqm/types/aqm-service-configs.types").Entity[]) | undefined) => Promise<import("../aqm/types/aqm-service-configs.types").Entity[]>;
    fetchPaginatedIdleCodes: (p: {
        orgId: string;
        page?: number | undefined;
        pageSize?: number | undefined;
        search?: string | undefined;
        customFilter?: string | undefined;
        supervisedUserId?: string | undefined;
        desktopProfileFilter?: boolean | undefined;
    }, cb?: ((res: any) => void | import("../aqm/types/aqm-service-configs.types").AgentStateIdleCodes) | undefined) => Promise<import("../aqm/types/aqm-service-configs.types").AgentStateIdleCodes>;
    fetchAgentsByOrgId: (p: {
        orgId: string;
        page: number;
        pageSize: number;
        searchValue: string;
        sortOrder: string;
    }, cb?: ((res: any) => void | import("../cms/types/cms-service.types").AgentDataResponse) | undefined) => Promise<import("../cms/types/cms-service.types").AgentDataResponse>;
    fetchDefaultAuxCodes: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | import("../aqm/types/aqm-service-configs.types").DefaultAuxCodes[]) | undefined) => Promise<import("../aqm/types/aqm-service-configs.types").DefaultAuxCodes[]>;
    fetchWrapUpCodes: (p: any, cb?: ((res: any) => void | import("../aqm/types/aqm-service-configs.types").Entity[]) | undefined) => Promise<import("../aqm/types/aqm-service-configs.types").Entity[]>;
    fetchPaginatedWrapUpCodes: (p: {
        orgId: string;
        page?: number | undefined;
        pageSize?: number | undefined;
        search?: string | undefined;
        customFilter?: string | undefined;
    }, cb?: ((res: any) => void | import("../aqm/types/aqm-service-configs.types").AgentStateIdleCodes) | undefined) => Promise<import("../aqm/types/aqm-service-configs.types").AgentStateIdleCodes>;
    fetchManagedTeams: (p: {
        orgId: string;
        userId: string;
    }, cb?: ((res: any) => void | Service.Conf.Team[]) | undefined) => Promise<Service.Conf.Team[]>;
    fetchManagedQueues: (p: {
        orgId: string;
        userId: string;
    }, cb?: ((res: any) => void | Service.Conf.Queue[]) | undefined) => Promise<Service.Conf.Queue[]>;
    fetchVteams: (p: {
        payload: Service.Aqm.Contact.VTeam;
        orgId: string;
        userId: string;
    }, cb?: ((res: any) => void | Service.Aqm.Contact.VteamDetails[]) | undefined) => Promise<Service.Aqm.Contact.VteamDetails[]>;
    fetchOutdialANICMS: (p: {
        orgId: string;
        outdialANIId: string;
    }, cb?: ((res: any) => void | Service.Aqm.Agent.OutdialAniListSuccess) | undefined) => Promise<Service.Aqm.Agent.OutdialAniListSuccess>;
    fetchPaginatedOutdialANI: (p: {
        orgId: string;
        outdialANIId: string;
        page: number;
        pageSize: number;
        search: string | undefined;
    }, cb?: ((res: any) => void | OutdialAniListSuccessPaginated) | undefined) => Promise<OutdialAniListSuccessPaginated>;
    fetchTeams: (p: {
        orgId: string;
        id: string;
    }, cb?: ((res: any) => void | Service.Conf.Team[]) | undefined) => Promise<Service.Conf.Team[]>;
    secureCADVariables: (p: unknown, cb?: ((res: any) => void | Service.Conf.SecureData) | undefined) => Promise<Service.Conf.SecureData>;
    fetchEpDnMappings: (p: {
        orgId: string;
        isWxccExtensionsEpDnEnabled: boolean;
    }, cb?: ((res: any) => void | import("../cms/types/cms-service.types").EpDnListMap[]) | undefined) => Promise<import("../cms/types/cms-service.types").EpDnListMap[]>;
    fetchEpList: (p: {
        payload: PaginationPayload;
        orgId: string;
    }, cb?: ((res: any) => void | import("../cms/types/cms-service.types").EPListResponse[]) | undefined) => Promise<import("../cms/types/cms-service.types").EPListResponse[]>;
    fetchPaginatedEpDnMappingList: (p: {
        payload: PaginationPayload;
        orgId: string;
        isWxccExtensionsEpDnEnabled: boolean;
    }, cb?: ((res: any) => void | import("../cms/types/cms-service.types").EPListResponse[]) | undefined) => Promise<import("../cms/types/cms-service.types").EPListResponse[]>;
    fetchPaginatedTeamsList: (p: {
        orgId: string;
        page?: number | undefined;
        pageSize?: number | undefined;
        search?: string | undefined;
        customFilter?: string | undefined;
        supervisorView?: boolean | undefined;
    }, cb?: ((res: any) => void | Service.Conf.TeamData) | undefined) => Promise<Service.Conf.TeamData>;
    fetchQueueList: (p: {
        payload: PaginationPayload;
        orgId: string;
    }, cb?: ((res: any) => void | import("../cms/types/cms-service.types").QueueListResponse) | undefined) => Promise<import("../cms/types/cms-service.types").QueueListResponse>;
    fetchAgentIdleCodes: (p: {
        orgId: string;
        agentId: string;
    }, cb?: ((res: any) => void | import("../cms/types/cms-service.types").AgentIdleCodes) | undefined) => Promise<import("../cms/types/cms-service.types").AgentIdleCodes>;
    fetchQueueDetails: (p: {
        queueIds: string;
    }, cb?: ((res: any) => void | import("../cms/types/cms-service.types").queueDetails[]) | undefined) => Promise<import("../cms/types/cms-service.types").queueDetails[]>;
    fetchUsers: (p: {
        pageNumber: number;
        pageSize: number;
        searchQuery?: string | undefined;
        userId?: string | undefined;
    }, cb?: ((res: any) => void | import("../cms/types/cms-service.types").BuddyAgentListResponse) | undefined) => Promise<import("../cms/types/cms-service.types").BuddyAgentListResponse>;
    fetchUserById: (p: {
        userId?: string | undefined;
    }, cb?: ((res: any) => void | import("../cms/types/cms-service.types").BuddyAgentListResponse) | undefined) => Promise<import("../cms/types/cms-service.types").BuddyAgentListResponse>;
    fetchPaginatedAuxCodes: (auxcodePayload: import("../aqm/types/aqm-service-configs.types").AuxCodePayload) => Promise<{}>;
};
type ErrDetails = {
    status: number;
    type: string;
    trackingId: string;
};
type PaginationPayload = {
    pageNumber: number;
    pageSize: number;
    channelType?: string;
    search?: string;
    desktopProfileFilter?: boolean;
};
type OutdialAni = {
    id: string;
    name: string;
};
type outdialAniData = {
    data: {
        outdialAniList: OutdialAni[];
    };
};
type OutdialAniListSuccessPaginated = {
    data: outdialAniData;
    meta: {
        totalRecords: number;
        totalPages: number;
        page: number;
        pageSize: number;
    };
};
type absErrorIds = {
    "Service.abs.fetchAddressBooksCMS": ErrDetails;
} | {
    "Service.abs.fetchCmsInitConfig": ErrDetails;
} | {
    "Service.abs.fetchWrapUpCodesFailed": ErrDetails;
} | {
    "Service.abs.fetchManagedTeamsFailed": ErrDetails;
} | {
    "Service.abs.fetchManagedQueuesFailed": ErrDetails;
} | {
    "Service.abs.FetchVTeamListFailed": ErrDetails;
} | {
    "Service.abs.fetchOutdialANICMS": ErrDetails;
} | {
    "Service.abs.secureCADVariablesFailed": ErrDetails;
} | {
    "Service.abs.fetchTeamsFailed": ErrDetails;
} | {
    "Service.abs.fetchQueuesFailed": ErrDetails;
} | {
    "Service.abs.fetchQueueDetailFailed": ErrDetails;
} | {
    "Service.abs.epDnMappingsFailed": ErrDetails;
} | {
    "Service.abs.fetchIdleCodesFailed": ErrDetails;
} | {
    "Service.abs.fetchEpListFailed": ErrDetails;
} | {
    "Service.abs.fetchPaginatedEpDnMappingListFailed": ErrDetails;
} | {
    "Service.abs.fetchBuddyAgentsForCallback": ErrDetails;
} | {
    "Service.abs.fetchUser": ErrDetails;
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.abs": absErrorIds;
        }
    }
}
declare module "../../index" {
    namespace Service.Agentx.Backend { }
}
export {};
